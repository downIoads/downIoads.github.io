<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Blog for Tech Enjoyers</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Blog for Tech Enjoyers</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Nov 2024 21:50:00 +0200</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>“How to install ntfs-3g on macOS using brew”</title>
      <link>http://localhost:1313/posts/how-to-install-ntfs-3g-macos/</link>
      <pubDate>Fri, 22 Nov 2024 21:50:00 +0200</pubDate>
      <guid>http://localhost:1313/posts/how-to-install-ntfs-3g-macos/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Life could be so easy. Want to install ntfs-3g on your new M4 Mac Mini? You might be naive and think you can just run:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brew install ntfs-3g&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But wait, it does not work. It says&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Error: ntfs-3g has been disabled because it requires FUSE!&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And that is because Homebrew has disabled any formulae that rely on FUSE. You could now install an unofficial tab like “gromgit/homebrew-fuse” but do you trust unofficial tabs? Since this solution would be boring, this tutorial is dedicated to building ntfs-3g from source on a modern Mac.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using nginx with self-signed certificates to encrypt local communications</title>
      <link>http://localhost:1313/posts/nginx-selfsigned-certs-tutorial/</link>
      <pubDate>Fri, 07 Jun 2024 20:00:00 +0200</pubDate>
      <guid>http://localhost:1313/posts/nginx-selfsigned-certs-tutorial/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;When you run local servers on your Raspberry Pi, you by default only get unencrypted http communications which makes it trivial for anyone in your LAN to snoop the traffic. This post is a brief tutorial how to get free encrypted https communications without having to purchase a real domain name. I use the example of a self-hosted Gitlab server as this was my actual use-case, but this tutorial should be useful even if you do not care about the Gitlab part.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Running Windows 98 SE in Vmware Workstation on modern hardware</title>
      <link>http://localhost:1313/posts/win98-se-vmware/</link>
      <pubDate>Tue, 13 Feb 2024 14:00:23 +0200</pubDate>
      <guid>http://localhost:1313/posts/win98-se-vmware/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Remember the good old days when your OS did not annoy you with ads or features you never asked for? When everything seemed minimalistic and lightweight, and it did not feel as if every mouse movement you make gets data mined and sent to Microsoft servers? I found an old Win98 SE (Second Edition, 4.10.2222A) install disc, created an image and tried to set it up using VMware Workstation 16. This blog post is about the general setup and a few tricks to make it work. It is not as easy to spin up as let&amp;rsquo;s say a Win XP VM, but when you get it working it runs flawlessly (except that there is no 3D acceleration with stops some but not all games from running).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Minimalistic SwiftUI GUI for Yt-dlp</title>
      <link>http://localhost:1313/posts/swiftui-ytdl/</link>
      <pubDate>Sat, 13 Jan 2024 14:00:23 +0200</pubDate>
      <guid>http://localhost:1313/posts/swiftui-ytdl/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Yt-dlp and ffmpeg and two of my favorite command-line tools. But I keep having to look up how to use them! For this reason, I made a simple SwiftUI GUI that has three simple commands built-in. The user only has to choose and output folder and a file type (mp3 [audio only], opus [audio only] and mkv [audio and video]) and click the download button. The binaries for yt-dlp and ffmpeg are downloaded from the most official sources I could find at runtime. My GUI is open-source and available at my &lt;a href=&#34;https://github.com/downIoads/swiftui-ytdl&#34;&gt;GitHub repo&lt;/a&gt;, but you have to build it yourself in Xcode. It supports light/dark mode (system setting) and is designed to be as minimalistic as possible.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to fake GitHub commits</title>
      <link>http://localhost:1313/posts/github-commit-faking/</link>
      <pubDate>Wed, 03 Jan 2024 14:00:23 +0200</pubDate>
      <guid>http://localhost:1313/posts/github-commit-faking/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In Git, you have to set your E-Mail address using the command:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git config --global user.email myEmail@example.com&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The problem is that when you now commit to a GitHub repository, GitHub will map this E-Mail to a GitHub account (if it exists) and then show the commit as if that account would have committed it. This has two direct implications:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You can find out the GitHub account of people you know the E-Mail of (security problem)&lt;/li&gt;&#xA;&lt;li&gt;You can use this technique to fake contribute to your repo to make it seem more trustworthy&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The E-Mail addresses of popular devs are often known from mailing lists etc. or can be found with a simple Google search. Look at the following &lt;a href=&#34;https://github.com/downIoads/downIoads.github.io/graphs/contributors&#34;&gt;example&lt;/a&gt; (purely as a Proof-of-Concept), here you can see who &amp;ldquo;contributed&amp;rdquo; to my blog:&#xA;&lt;img src=&#34;http://localhost:1313/images/github-fake-commit.png&#34; alt=&#34;targets&#34; title=&#34;Commit overview of my blog&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Automated self-hosted GitLab backups to Dropbox using a Python script on Raspberry Pi</title>
      <link>http://localhost:1313/posts/python-gitlab-backup-rpi/</link>
      <pubDate>Tue, 02 Jan 2024 18:00:23 +0200</pubDate>
      <guid>http://localhost:1313/posts/python-gitlab-backup-rpi/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;I prefer self-hosted GitLab over uploading my code to GitHub. The only disadvantage is that I need to take care of backups myself in case a hard drive dies or gets stolen. Therefore, I wrote a simple Python script that runs on my Raspberry Pi twice a week, which backs up my GitLab config and data and uploads them to my Dropbox. Specifically, I am using the free community edition of GitLab on my RPI. GitLab backups consist of two parts: There is the config (which includes the keys needed to decrypt the data backup) backup and the data backup. Technically, it is recommended to store these two backups separately, but I do not have any sensitive data in my GitLab projects, I just want to prevent data loss. This is why my script backs up both config and data backup into the same Dropbox account. In order for this script to work, you must set up a Dropbox app by using the &lt;a href=&#34;https://www.dropbox.com/developers&#34;&gt;Dropbox developer site&lt;/a&gt;. I would recommend limiting the scope of the app into a single folder. This way, the token you put into the Python script can only read and write data to this folder and the rest of the Dropbox is untouched. Note that the token you can generate on the website where you adjust your Dropbox App settings is only temporary (a few hours) and will not be used by this script. Instead, read through &lt;a href=&#34;https://www.dropboxforum.com/t5/Dropbox-API-Support-Feedback/Issue-in-generating-access-token/m-p/592921/highlight/true#M27586&#34;&gt;this reply&lt;/a&gt; to learn how to use this token to get a permanent refresh token. The script itself then uses this refresh token to get a new authorization token each time it runs. The authorization token you get will always be valid for a few hours (which is enough for the script) and then become invalid. To sum it up: There is a &amp;ldquo;refresh token&amp;rdquo; which is used to request new &amp;ldquo;authorization tokens&amp;rdquo; and the authorization tokens are what you need to be able to access your Dropbox. I had to read lots of threads and documentation until I found the working answer that I linked above to figure this out.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to use APNs with Golang and Google Firebase &#43; Firestore</title>
      <link>http://localhost:1313/posts/golang-firebase-apns/</link>
      <pubDate>Mon, 01 Jan 2024 20:00:00 +0200</pubDate>
      <guid>http://localhost:1313/posts/golang-firebase-apns/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;If you are building a SwiftUI app like me, you will probably encounter a situation where you want to be able to send out Push Notifications to your users. Google Firebase offers a free plan (completely free with pretty generous usage) that allows you to do just that. Combined with Google Firestore you even get a small database where you can store device tokens (your users will write their device token to the database by using your app, and you send out notifications to all device tokens). This post is not about the Google Firebase / Firestore setup, but here is a note: If you directly go to the Firestore website and try to create an account it will force you to give them your payment info even if you choose the free plan. But if you just create a Firebase account with the Spark plan (free), you will be able to access Firestore from your dashboard without ever giving out your payment information. This can be useful as you might make a mistake in your Firestore Rules setup which allows anyone to write to it, which potentially could lead to very large bills. But if you never gave Google your payment info, you do not have to worry about scenarios such as this one. So let&amp;rsquo;s look at the Golang code I use to send out APNs notifications to my users.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wxwidgets macOS guide to compile universal binaries</title>
      <link>http://localhost:1313/posts/wxwidget-macos-universal-binary/</link>
      <pubDate>Wed, 25 Oct 2023 14:00:23 +0200</pubDate>
      <guid>http://localhost:1313/posts/wxwidget-macos-universal-binary/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;I wanted to publish my wxwidgets project &amp;ldquo;D2R Runeword Calculator&amp;rdquo; which I already blogged about, to the macOS App Store. In order to do this with wxwidgets, you are advised to create statically-linked binaries that run both on x86_64 and arm64. But the instructions in the wxwidgets tutorials are outdated and lack crucial information. It took me a few hours, but I figured out how it can be done on macOS Ventura (13.6). The wxwidgets version I will be using is 3.2.3, which was released on October 10, 2023.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hackintosh #3: Running Sonoma on XPS 9370 (i7 8550u - 4k display)</title>
      <link>http://localhost:1313/posts/hackintosh-xps9370/</link>
      <pubDate>Tue, 24 Oct 2023 08:00:23 +0200</pubDate>
      <guid>http://localhost:1313/posts/hackintosh-xps9370/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;macOS Sonoma is the newest macOS version (which always is a challenge for Hackintosh) and installing it on an older laptop is an extra challenge. In this post I will talk about how I successfully hackintoshed the XPS 9370. Note that currently online installers do not work for Sonoma, so you require an Apple machine or a Hackintosh to create an offline installer (first you create a FAT32 partition called EFI (Size around 200MB), then you make an Mac OS Extended (Journaled) partition called MyVolume, then you follow &lt;a href=&#34;https://support.apple.com/en-mide/HT201372&#34;&gt;this Apple guide&lt;/a&gt;).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using Stable Diffusion as Discord Emote Generator</title>
      <link>http://localhost:1313/posts/stable-diffusion-gopher/</link>
      <pubDate>Fri, 20 Oct 2023 22:50:00 +0200</pubDate>
      <guid>http://localhost:1313/posts/stable-diffusion-gopher/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Stable Diffusion is an open-source deep learning text-to-image model that does not have any filters and works offline. There are a few controversies around it (e.g., it has been trained on copyrighted artwork but gives the user of Stable Diffusion the rights to all images it spits out, and it does not have filters and can be used to create all sorts of weird content). It works offline and poses a threat to existing businesses that sell AI-generated images (e.g., OpenAI&amp;rsquo;s closed-source DALLE-3). It is harder to use than, e.g., DALL-E because there are a lot of settings to adjust, which makes it highly customizable but also harder to use. I recently tried using Stable Diffusion again because &lt;a href=&#34;https://developer.nvidia.com/blog/unlock-faster-image-generation-in-stable-diffusion-web-ui-with-nvidia-tensorrt/&#34;&gt;NVIDIA published new Game Ready drivers for their RTX GPUs, which greatly increases Stable Diffusion&amp;rsquo;s performance&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blocking Twitch Ads by piping the stream to VLC</title>
      <link>http://localhost:1313/posts/twitch-adblock-streamlink/</link>
      <pubDate>Sat, 14 Oct 2023 08:00:23 +0200</pubDate>
      <guid>http://localhost:1313/posts/twitch-adblock-streamlink/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Twitch keeps changing their backend, and it recently became more difficult to block ads. A few years ago, any ad blocker seemed to work just fine. Then they changed their code, and uBlock Origin, Adblock Plus, etc. all fail to remove ads. While there are still browser plugins that promise to block Twitch ads, many of them are potentially shady, as they route your traffic over some proxy server that does who-knows-what. Since I don&amp;rsquo;t like routing my traffic over shady servers and I want to avoid testing browser extensions that have way too many privileges, I tried to find a different approach. In this post, I will talk about two approaches:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hackintosh #2: Running Ventura using Haswell CPU and a spoofed AMD RX 6650 XT</title>
      <link>http://localhost:1313/posts/hackintosh-ventura-rx6650xt/</link>
      <pubDate>Tue, 10 Oct 2023 08:00:23 +0200</pubDate>
      <guid>http://localhost:1313/posts/hackintosh-ventura-rx6650xt/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In my &lt;a href=&#34;http://localhost:1313/posts/hackintosh-project1/&#34;&gt;previous post&lt;/a&gt;, I wrote about how I used the following hardware to run Monterey (an older macOS version):&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Intel i5 4400 (Haswell)&lt;/li&gt;&#xA;&lt;li&gt;MSI B85-G41&lt;/li&gt;&#xA;&lt;li&gt;Intel AX210 BT/Wi-Fi&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;As you can see, this build did not have a dGPU. For this reason, I bought an AMD RX 6650 XT and added it to this computer. This GPU officially is not supported either (so it would have been easier to get an AMD RX 6600 instead), but you can do GPU ID spoofing to make it work. I preferred the 6650 XT over the 6600 because in my country both GPUs currently are very cheap, and these two models had the same price! The 6650 XT is slightly more powerful and allows me to learn how GPU spoofing works, so the decision was easy.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hackintosh in 2023</title>
      <link>http://localhost:1313/posts/hackintosh-project1/</link>
      <pubDate>Mon, 02 Oct 2023 08:00:23 +0200</pubDate>
      <guid>http://localhost:1313/posts/hackintosh-project1/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;I always enjoy testing different tech-related things, such as different OSes. Having used Windows, Linux, iOS and Android, I thought it was about time I tried macOS for the first time. I prefer not to be trapped within Apple&amp;rsquo;s walled garden, so instead of purchasing a Mac, I tried to give new life to old hardware I still had laying around. In the context of Hackintosh, it is important to know which hardware is supported for what. So first of all, here is an overview of the hardware I used:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Encrypt data using Argon2 and AES-GCM-256 in Python</title>
      <link>http://localhost:1313/posts/aes-argon2-python/</link>
      <pubDate>Thu, 10 Aug 2023 08:00:23 +0200</pubDate>
      <guid>http://localhost:1313/posts/aes-argon2-python/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;I have bought insecure Mifare Classic 1k cards (Crypto-1 is broken and should not be used), so the only way to securely store data on these cards is with a tamperproof, modern encryption algorithm. So I decided to learn some basics and write a simple Python script that allows me to do this. AES-GCM was chosen because it features tags that are used to determine whether encrypted data was tempered with or not.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang&#39;s unintuitive pitfalls</title>
      <link>http://localhost:1313/posts/golang-unintuitive-pitfalls/</link>
      <pubDate>Fri, 28 Jul 2023 08:00:23 +0200</pubDate>
      <guid>http://localhost:1313/posts/golang-unintuitive-pitfalls/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Disclaimer: I have just recently picked up the language, so don&amp;rsquo;t expect this post to be a deep analysis of advanced Golang concepts. Instead, think of it as the perception of Golang from someone who already knows other programming languages but just recently started to learn Go. As with most things, there is stuff that I really like about Golang, and there are quite a few things that truly annoy me. Let&amp;rsquo;s do the feedback sandwich thing:&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; runeword calculator GUI for Diablo 2 Resurrected</title>
      <link>http://localhost:1313/posts/d2-runewords/</link>
      <pubDate>Thu, 27 Jul 2023 22:50:00 +0200</pubDate>
      <guid>http://localhost:1313/posts/d2-runewords/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Diablo 2 Resurrected is one of my favorite games of all time, but there are a lot of things you need to remember. There are various online tools (the idea of a runeword calculator is not new), but many of them have a terrible User Interface, are outdated, or are located on slow websites that autoplay Twitch streams when you open them. So I decided to learn how to use wxWidgets by making an assistant GUI tool for my favorite game! I have open-sourced this tool, and you can download it from this &lt;a href=&#34;https://github.com/downIoads/cpp_diablo2r_runewordCalculator/tree/main&#34;&gt;Github repo&lt;/a&gt;. The repo contains the source code and you can build it yourself. The tool has been tested on Windows 11, Ubuntu 22.04.3 LTS and macOS Ventura and Sonoma. It also is available for 4.99€ on the macOS App Store (best option if you are lazy).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python script for Llama 2 conversations</title>
      <link>http://localhost:1313/posts/llama-python/</link>
      <pubDate>Wed, 26 Jul 2023 18:00:23 +0200</pubDate>
      <guid>http://localhost:1313/posts/llama-python/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;I have played around a bit with the new Llama 2 LLM, more specifically with the 13B parameter Huggingface version that you can download &lt;a href=&#34;https://huggingface.co/TheBloke/Llama-2-13B-chat-GGML/resolve/main/llama-2-13b-chat.ggmlv3.q4_0.bin&#34;&gt;here&lt;/a&gt;. In order to run it, check out &lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;Llama.cpp&lt;/a&gt;. It has precise setup instructions, so I will assume you get that running on your own. What I did not enjoy was having to type long commands into my Windows cmd every time, so I decided to write a short Python script that runs the process in the background and displays the output in the Python shell in real-time (well, almost). Windows paths are weird, especially when you try to put them in a Python string. Double-escaping \ did not seem to work, so I had to go with raw strings instead. Let&amp;rsquo;s take a look at the script I am using:&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to authenticate and write data to Mifare Classic 1k using ACS ACR122U</title>
      <link>http://localhost:1313/posts/nfc-mifare-acr122u/</link>
      <pubDate>Sun, 23 Jul 2023 14:00:23 +0200</pubDate>
      <guid>http://localhost:1313/posts/nfc-mifare-acr122u/</guid>
      <description>&lt;h2 id=&#34;goal&#34;&gt;Goal&lt;/h2&gt;&#xA;&lt;p&gt;I bought some Mifare Classic 1k tags and all Android/iOS apps I tried (official NXP apps, NFC Tools Pro and Mifare Classic Tool) failed to write data to my tags! Mifare Classic tags are not as straight-forward as e.g. NTAG ones because they are proprietary (they do technically support NDEF, but it&amp;rsquo;s not a compatible as you would like it to be). So to write data to these tags using my ACS ACR122U, I use the Windows Smart Card API to communicate with the NFC reader. Then I use special commands to authenticate the block I want to write data to, and then the data is written. I also added a function to NDEF format the entire card so that it becomes compatible with iOS and Android apps!&lt;/p&gt;</description>
    </item>
    <item>
      <title>NFC in 2023</title>
      <link>http://localhost:1313/posts/nfc-overview-and-playing-around/</link>
      <pubDate>Sun, 09 Jul 2023 14:00:23 +0200</pubDate>
      <guid>http://localhost:1313/posts/nfc-overview-and-playing-around/</guid>
      <description>&lt;h2 id=&#34;overview-of-nfc-tags&#34;&gt;Overview of NFC tags&lt;/h2&gt;&#xA;&lt;p&gt;NFC was invented in 2002 by Sony and NXP Semiconductors. Since then, a lot of different standards and tags have been created, so here is a basic overview of commonly used tags and their classification. To simplify things, commonly used NFC tags can usually be put into one of five forum types:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Forum type 1 (read-only)&lt;/li&gt;&#xA;&lt;li&gt;Forum type 2 (usually read/write and more storage than type 1)&lt;/li&gt;&#xA;&lt;li&gt;Forum type 3 (mainly used in Japan)&lt;/li&gt;&#xA;&lt;li&gt;Forum type 4 (like type 2, but with more storage and features and a higher cost than type 2)&lt;/li&gt;&#xA;&lt;li&gt;Forum type 5 (highest communication range, not commonly used by consumers)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;These forum types help cluster different tags into categories. Different manufacturers produce different chip series, but the most commonly used and best supported NFC tags are the NTAG series by NXP. If you just want to play around with NFC and want to buy the most compatible (e.g., with smartphones) NFC tags, you should purchase NTAG 2xx or NTAG 4xx tags. To provide a broader overview, here is an overview of the arguably most popular and most compatible NFC tag series called NTAG by NXP:&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to calculate any weekday</title>
      <link>http://localhost:1313/posts/how-to-calculate-any-weekday/</link>
      <pubDate>Tue, 04 Jul 2023 20:00:00 +0200</pubDate>
      <guid>http://localhost:1313/posts/how-to-calculate-any-weekday/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;I once read about a simple way to calculate what day of the week any given date is. All you need to do is remember a few numbers and do basic math in your head. So let&amp;rsquo;s get started!&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-you-need-to-remember&#34;&gt;What you need to remember&lt;/h2&gt;&#xA;&lt;p&gt;Each weekday has an assigned number:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Sunday = 0&lt;/li&gt;&#xA;&lt;li&gt;Monday = 1&lt;/li&gt;&#xA;&lt;li&gt;Tuesday = 2&lt;/li&gt;&#xA;&lt;li&gt;Wednesday = 3&lt;/li&gt;&#xA;&lt;li&gt;Thursday = 4&lt;/li&gt;&#xA;&lt;li&gt;Friday = 5&lt;/li&gt;&#xA;&lt;li&gt;Saturday = 6&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Also remember the following list for the months:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mine your username</title>
      <link>http://localhost:1313/posts/mine-your-username/</link>
      <pubDate>Mon, 03 Jul 2023 21:50:00 +0200</pubDate>
      <guid>http://localhost:1313/posts/mine-your-username/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;So you wanted to sign up for a website but couldn&amp;rsquo;t think of a cool username that wasn&amp;rsquo;t already taken? No way, I was in that same situation! So I decided to write a C++ program that takes your base name (e.g., &amp;ldquo;cafe&amp;rdquo;) and adds a few numbers. The idea is to generate usernames that, when hashed using SHA256 or KECCAK256 result in strings that contain your base name again! I also added a mode where the requirement is that your base name must be included at least twice in both the SHA256 and the KECCAK256 output. The code of the resulting program is available at this &lt;a href=&#34;https://github.com/downIoads/cpp_username_miner/&#34;&gt;Github repo&lt;/a&gt;. It goes without saying that your base word must be hex-compatible (e.g. cafe, decaf, decade or facade), otherwise it can&amp;rsquo;t possibly be included in the hash output!&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to write a tutorial</title>
      <link>http://localhost:1313/posts/how-to-write-a-tutorial/</link>
      <pubDate>Sun, 02 Jul 2023 14:00:23 +0200</pubDate>
      <guid>http://localhost:1313/posts/how-to-write-a-tutorial/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;So you have decided to write a tutorial? Remember that there is nothing more frustrating than being a beginner at something, trying to become better at that thing by going through a tutorial and then being unable to complete the tutorial due to errors or unclear instructions. If you are not willing to write a good tutorial, it is better to not write a tutorial at all. So here are a few basic things that you should consider when trying to write a good tutorial.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
