<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on Blog for Tech Enjoyers</title>
    <link>http://localhost:1313/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Blog for Tech Enjoyers</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Nov 2024 21:50:00 +0200</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>“How to install ntfs-3g on macOS using brew”</title>
      <link>http://localhost:1313/posts/how-to-install-ntfs-3g-macos/</link>
      <pubDate>Fri, 22 Nov 2024 21:50:00 +0200</pubDate>
      <guid>http://localhost:1313/posts/how-to-install-ntfs-3g-macos/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Life could be so easy. Want to install ntfs-3g on your new M4 Mac Mini? You might be naive and think you can just run:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brew install ntfs-3g&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But wait, it does not work. It says&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Error: ntfs-3g has been disabled because it requires FUSE!&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And that is because Homebrew has disabled any formulae that rely on FUSE. You could now install an unofficial tab like “gromgit/homebrew-fuse” but do you trust unofficial tabs? Since this solution would be boring, this tutorial is dedicated to building ntfs-3g from source on a modern Mac.&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; runeword calculator GUI for Diablo 2 Resurrected</title>
      <link>http://localhost:1313/posts/d2-runewords/</link>
      <pubDate>Thu, 27 Jul 2023 22:50:00 +0200</pubDate>
      <guid>http://localhost:1313/posts/d2-runewords/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Diablo 2 Resurrected is one of my favorite games of all time, but there are a lot of things you need to remember. There are various online tools (the idea of a runeword calculator is not new), but many of them have a terrible User Interface, are outdated, or are located on slow websites that autoplay Twitch streams when you open them. So I decided to learn how to use wxWidgets by making an assistant GUI tool for my favorite game! I have open-sourced this tool, and you can download it from this &lt;a href=&#34;https://github.com/downIoads/cpp_diablo2r_runewordCalculator/tree/main&#34;&gt;Github repo&lt;/a&gt;. The repo contains the source code and you can build it yourself. The tool has been tested on Windows 11, Ubuntu 22.04.3 LTS and macOS Ventura and Sonoma. It also is available for 4.99€ on the macOS App Store (best option if you are lazy).&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to authenticate and write data to Mifare Classic 1k using ACS ACR122U</title>
      <link>http://localhost:1313/posts/nfc-mifare-acr122u/</link>
      <pubDate>Sun, 23 Jul 2023 14:00:23 +0200</pubDate>
      <guid>http://localhost:1313/posts/nfc-mifare-acr122u/</guid>
      <description>&lt;h2 id=&#34;goal&#34;&gt;Goal&lt;/h2&gt;&#xA;&lt;p&gt;I bought some Mifare Classic 1k tags and all Android/iOS apps I tried (official NXP apps, NFC Tools Pro and Mifare Classic Tool) failed to write data to my tags! Mifare Classic tags are not as straight-forward as e.g. NTAG ones because they are proprietary (they do technically support NDEF, but it&amp;rsquo;s not a compatible as you would like it to be). So to write data to these tags using my ACS ACR122U, I use the Windows Smart Card API to communicate with the NFC reader. Then I use special commands to authenticate the block I want to write data to, and then the data is written. I also added a function to NDEF format the entire card so that it becomes compatible with iOS and Android apps!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mine your username</title>
      <link>http://localhost:1313/posts/mine-your-username/</link>
      <pubDate>Mon, 03 Jul 2023 21:50:00 +0200</pubDate>
      <guid>http://localhost:1313/posts/mine-your-username/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;So you wanted to sign up for a website but couldn&amp;rsquo;t think of a cool username that wasn&amp;rsquo;t already taken? No way, I was in that same situation! So I decided to write a C++ program that takes your base name (e.g., &amp;ldquo;cafe&amp;rdquo;) and adds a few numbers. The idea is to generate usernames that, when hashed using SHA256 or KECCAK256 result in strings that contain your base name again! I also added a mode where the requirement is that your base name must be included at least twice in both the SHA256 and the KECCAK256 output. The code of the resulting program is available at this &lt;a href=&#34;https://github.com/downIoads/cpp_username_miner/&#34;&gt;Github repo&lt;/a&gt;. It goes without saying that your base word must be hex-compatible (e.g. cafe, decaf, decade or facade), otherwise it can&amp;rsquo;t possibly be included in the hash output!&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
