<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Blog for Tech Enjoyers</title>
    <link>http://localhost:1313/tags/python/</link>
    <description>Recent content in Python on Blog for Tech Enjoyers</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Jan 2024 18:00:23 +0200</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Automated self-hosted GitLab backups to Dropbox using a Python script on Raspberry Pi</title>
      <link>http://localhost:1313/posts/python-gitlab-backup-rpi/</link>
      <pubDate>Tue, 02 Jan 2024 18:00:23 +0200</pubDate>
      <guid>http://localhost:1313/posts/python-gitlab-backup-rpi/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;I prefer self-hosted GitLab over uploading my code to GitHub. The only disadvantage is that I need to take care of backups myself in case a hard drive dies or gets stolen. Therefore, I wrote a simple Python script that runs on my Raspberry Pi twice a week, which backs up my GitLab config and data and uploads them to my Dropbox. Specifically, I am using the free community edition of GitLab on my RPI. GitLab backups consist of two parts: There is the config (which includes the keys needed to decrypt the data backup) backup and the data backup. Technically, it is recommended to store these two backups separately, but I do not have any sensitive data in my GitLab projects, I just want to prevent data loss. This is why my script backs up both config and data backup into the same Dropbox account. In order for this script to work, you must set up a Dropbox app by using the &lt;a href=&#34;https://www.dropbox.com/developers&#34;&gt;Dropbox developer site&lt;/a&gt;. I would recommend limiting the scope of the app into a single folder. This way, the token you put into the Python script can only read and write data to this folder and the rest of the Dropbox is untouched. Note that the token you can generate on the website where you adjust your Dropbox App settings is only temporary (a few hours) and will not be used by this script. Instead, read through &lt;a href=&#34;https://www.dropboxforum.com/t5/Dropbox-API-Support-Feedback/Issue-in-generating-access-token/m-p/592921/highlight/true#M27586&#34;&gt;this reply&lt;/a&gt; to learn how to use this token to get a permanent refresh token. The script itself then uses this refresh token to get a new authorization token each time it runs. The authorization token you get will always be valid for a few hours (which is enough for the script) and then become invalid. To sum it up: There is a &amp;ldquo;refresh token&amp;rdquo; which is used to request new &amp;ldquo;authorization tokens&amp;rdquo; and the authorization tokens are what you need to be able to access your Dropbox. I had to read lots of threads and documentation until I found the working answer that I linked above to figure this out.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Encrypt data using Argon2 and AES-GCM-256 in Python</title>
      <link>http://localhost:1313/posts/aes-argon2-python/</link>
      <pubDate>Thu, 10 Aug 2023 08:00:23 +0200</pubDate>
      <guid>http://localhost:1313/posts/aes-argon2-python/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;I have bought insecure Mifare Classic 1k cards (Crypto-1 is broken and should not be used), so the only way to securely store data on these cards is with a tamperproof, modern encryption algorithm. So I decided to learn some basics and write a simple Python script that allows me to do this. AES-GCM was chosen because it features tags that are used to determine whether encrypted data was tempered with or not.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python script for Llama 2 conversations</title>
      <link>http://localhost:1313/posts/llama-python/</link>
      <pubDate>Wed, 26 Jul 2023 18:00:23 +0200</pubDate>
      <guid>http://localhost:1313/posts/llama-python/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;I have played around a bit with the new Llama 2 LLM, more specifically with the 13B parameter Huggingface version that you can download &lt;a href=&#34;https://huggingface.co/TheBloke/Llama-2-13B-chat-GGML/resolve/main/llama-2-13b-chat.ggmlv3.q4_0.bin&#34;&gt;here&lt;/a&gt;. In order to run it, check out &lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;Llama.cpp&lt;/a&gt;. It has precise setup instructions, so I will assume you get that running on your own. What I did not enjoy was having to type long commands into my Windows cmd every time, so I decided to write a short Python script that runs the process in the background and displays the output in the Python shell in real-time (well, almost). Windows paths are weird, especially when you try to put them in a Python string. Double-escaping \ did not seem to work, so I had to go with raw strings instead. Let&amp;rsquo;s take a look at the script I am using:&lt;/p&gt;</description>
    </item>
    <item>
      <title>NFC in 2023</title>
      <link>http://localhost:1313/posts/nfc-overview-and-playing-around/</link>
      <pubDate>Sun, 09 Jul 2023 14:00:23 +0200</pubDate>
      <guid>http://localhost:1313/posts/nfc-overview-and-playing-around/</guid>
      <description>&lt;h2 id=&#34;overview-of-nfc-tags&#34;&gt;Overview of NFC tags&lt;/h2&gt;&#xA;&lt;p&gt;NFC was invented in 2002 by Sony and NXP Semiconductors. Since then, a lot of different standards and tags have been created, so here is a basic overview of commonly used tags and their classification. To simplify things, commonly used NFC tags can usually be put into one of five forum types:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Forum type 1 (read-only)&lt;/li&gt;&#xA;&lt;li&gt;Forum type 2 (usually read/write and more storage than type 1)&lt;/li&gt;&#xA;&lt;li&gt;Forum type 3 (mainly used in Japan)&lt;/li&gt;&#xA;&lt;li&gt;Forum type 4 (like type 2, but with more storage and features and a higher cost than type 2)&lt;/li&gt;&#xA;&lt;li&gt;Forum type 5 (highest communication range, not commonly used by consumers)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;These forum types help cluster different tags into categories. Different manufacturers produce different chip series, but the most commonly used and best supported NFC tags are the NTAG series by NXP. If you just want to play around with NFC and want to buy the most compatible (e.g., with smartphones) NFC tags, you should purchase NTAG 2xx or NTAG 4xx tags. To provide a broader overview, here is an overview of the arguably most popular and most compatible NFC tag series called NTAG by NXP:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
