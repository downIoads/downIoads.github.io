<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial on Blog for Tech Enjoyers</title>
    <link>http://localhost:1313/tags/tutorial/</link>
    <description>Recent content in Tutorial on Blog for Tech Enjoyers</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Jun 2024 20:00:00 +0200</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/tutorial/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using nginx with self-signed certificates to encrypt local communications</title>
      <link>http://localhost:1313/posts/nginx-selfsigned-certs-tutorial/</link>
      <pubDate>Fri, 07 Jun 2024 20:00:00 +0200</pubDate>
      <guid>http://localhost:1313/posts/nginx-selfsigned-certs-tutorial/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;When you run local servers on your Raspberry Pi, you by default only get unencrypted http communications which makes it trivial for anyone in your LAN to snoop the traffic. This post is a brief tutorial how to get free encrypted https communications without having to purchase a real domain name. I use the example of a self-hosted Gitlab server as this was my actual use-case, but this tutorial should be useful even if you do not care about the Gitlab part.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Running Windows 98 SE in Vmware Workstation on modern hardware</title>
      <link>http://localhost:1313/posts/win98-se-vmware/</link>
      <pubDate>Tue, 13 Feb 2024 14:00:23 +0200</pubDate>
      <guid>http://localhost:1313/posts/win98-se-vmware/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Remember the good old days when your OS did not annoy you with ads or features you never asked for? When everything seemed minimalistic and lightweight, and it did not feel as if every mouse movement you make gets data mined and sent to Microsoft servers? I found an old Win98 SE (Second Edition, 4.10.2222A) install disc, created an image and tried to set it up using VMware Workstation 16. This blog post is about the general setup and a few tricks to make it work. It is not as easy to spin up as let&amp;rsquo;s say a Win XP VM, but when you get it working it runs flawlessly (except that there is no 3D acceleration with stops some but not all games from running).&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to fake GitHub commits</title>
      <link>http://localhost:1313/posts/github-commit-faking/</link>
      <pubDate>Wed, 03 Jan 2024 14:00:23 +0200</pubDate>
      <guid>http://localhost:1313/posts/github-commit-faking/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In Git, you have to set your E-Mail address using the command:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git config --global user.email myEmail@example.com&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The problem is that when you now commit to a GitHub repository, GitHub will map this E-Mail to a GitHub account (if it exists) and then show the commit as if that account would have committed it. This has two direct implications:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You can find out the GitHub account of people you know the E-Mail of (security problem)&lt;/li&gt;&#xA;&lt;li&gt;You can use this technique to fake contribute to your repo to make it seem more trustworthy&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The E-Mail addresses of popular devs are often known from mailing lists etc. or can be found with a simple Google search. Look at the following &lt;a href=&#34;https://github.com/downIoads/downIoads.github.io/graphs/contributors&#34;&gt;example&lt;/a&gt; (purely as a Proof-of-Concept), here you can see who &amp;ldquo;contributed&amp;rdquo; to my blog:&#xA;&lt;img src=&#34;http://localhost:1313/images/github-fake-commit.png&#34; alt=&#34;targets&#34; title=&#34;Commit overview of my blog&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to use APNs with Golang and Google Firebase &#43; Firestore</title>
      <link>http://localhost:1313/posts/golang-firebase-apns/</link>
      <pubDate>Mon, 01 Jan 2024 20:00:00 +0200</pubDate>
      <guid>http://localhost:1313/posts/golang-firebase-apns/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;If you are building a SwiftUI app like me, you will probably encounter a situation where you want to be able to send out Push Notifications to your users. Google Firebase offers a free plan (completely free with pretty generous usage) that allows you to do just that. Combined with Google Firestore you even get a small database where you can store device tokens (your users will write their device token to the database by using your app, and you send out notifications to all device tokens). This post is not about the Google Firebase / Firestore setup, but here is a note: If you directly go to the Firestore website and try to create an account it will force you to give them your payment info even if you choose the free plan. But if you just create a Firebase account with the Spark plan (free), you will be able to access Firestore from your dashboard without ever giving out your payment information. This can be useful as you might make a mistake in your Firestore Rules setup which allows anyone to write to it, which potentially could lead to very large bills. But if you never gave Google your payment info, you do not have to worry about scenarios such as this one. So let&amp;rsquo;s look at the Golang code I use to send out APNs notifications to my users.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wxwidgets macOS guide to compile universal binaries</title>
      <link>http://localhost:1313/posts/wxwidget-macos-universal-binary/</link>
      <pubDate>Wed, 25 Oct 2023 14:00:23 +0200</pubDate>
      <guid>http://localhost:1313/posts/wxwidget-macos-universal-binary/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;I wanted to publish my wxwidgets project &amp;ldquo;D2R Runeword Calculator&amp;rdquo; which I already blogged about, to the macOS App Store. In order to do this with wxwidgets, you are advised to create statically-linked binaries that run both on x86_64 and arm64. But the instructions in the wxwidgets tutorials are outdated and lack crucial information. It took me a few hours, but I figured out how it can be done on macOS Ventura (13.6). The wxwidgets version I will be using is 3.2.3, which was released on October 10, 2023.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blocking Twitch Ads by piping the stream to VLC</title>
      <link>http://localhost:1313/posts/twitch-adblock-streamlink/</link>
      <pubDate>Sat, 14 Oct 2023 08:00:23 +0200</pubDate>
      <guid>http://localhost:1313/posts/twitch-adblock-streamlink/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Twitch keeps changing their backend, and it recently became more difficult to block ads. A few years ago, any ad blocker seemed to work just fine. Then they changed their code, and uBlock Origin, Adblock Plus, etc. all fail to remove ads. While there are still browser plugins that promise to block Twitch ads, many of them are potentially shady, as they route your traffic over some proxy server that does who-knows-what. Since I don&amp;rsquo;t like routing my traffic over shady servers and I want to avoid testing browser extensions that have way too many privileges, I tried to find a different approach. In this post, I will talk about two approaches:&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to calculate any weekday</title>
      <link>http://localhost:1313/posts/how-to-calculate-any-weekday/</link>
      <pubDate>Tue, 04 Jul 2023 20:00:00 +0200</pubDate>
      <guid>http://localhost:1313/posts/how-to-calculate-any-weekday/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;I once read about a simple way to calculate what day of the week any given date is. All you need to do is remember a few numbers and do basic math in your head. So let&amp;rsquo;s get started!&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-you-need-to-remember&#34;&gt;What you need to remember&lt;/h2&gt;&#xA;&lt;p&gt;Each weekday has an assigned number:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Sunday = 0&lt;/li&gt;&#xA;&lt;li&gt;Monday = 1&lt;/li&gt;&#xA;&lt;li&gt;Tuesday = 2&lt;/li&gt;&#xA;&lt;li&gt;Wednesday = 3&lt;/li&gt;&#xA;&lt;li&gt;Thursday = 4&lt;/li&gt;&#xA;&lt;li&gt;Friday = 5&lt;/li&gt;&#xA;&lt;li&gt;Saturday = 6&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Also remember the following list for the months:&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to write a tutorial</title>
      <link>http://localhost:1313/posts/how-to-write-a-tutorial/</link>
      <pubDate>Sun, 02 Jul 2023 14:00:23 +0200</pubDate>
      <guid>http://localhost:1313/posts/how-to-write-a-tutorial/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;So you have decided to write a tutorial? Remember that there is nothing more frustrating than being a beginner at something, trying to become better at that thing by going through a tutorial and then being unable to complete the tutorial due to errors or unclear instructions. If you are not willing to write a good tutorial, it is better to not write a tutorial at all. So here are a few basic things that you should consider when trying to write a good tutorial.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
